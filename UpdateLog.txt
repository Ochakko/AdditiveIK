AdditiveIK UpdateLog
https://github.com/Ochakko/AdditiveIK


2023/12/15
Shadowプレートメニュー追加
　設定はアプリ終了時にtempフォルダに保存し　起動時に自動読込




2023/12/14
デプスシャドウ機能を追加
　テストとしてカメラから選択モデルのHipsジョイントの方向へシャドウ用のライトを向けています
プロジェクト保存時に　Shaderメニューのsmoothcoefも保存
デプスシャドウのスクリーンショットをREADME.mdに追加
デプスシャドウリファクタリング　必要不要を試行錯誤して判断しメモリの不要な多重化をやめた




2023/12/10
MetalSmoothMapの　rにmetalcoefを　aにsmoothcoefを掛けて調整
　ShaderメニューのMetalCoefスライダーとSmoothCoefスライダーで設定
　手持ちのアセットで試したところ　smoothCoefの方が影響が大きい　smoothが大きいほど白く小さいほど拡散色が出る
ShaderTypeParamsDlgでの設定値をShaderTypeWndにも反映
ツールボタンショートカットアイコンのMaterialRate設定の内DiffuseRateとSpecularRateをシェーダに反映
　モデル単位でDiffuseとSpecularに倍率を掛けることが可能
　AUTO, PBR, STD, NOLIGHTに対して効果有



2023/12/09
ZPrepassクリッピングをDispAndLimitsメニューのオプションに.
　シーンによって効果がある場合と　マイナス効果になる場合があったので必要に応じて.
PBR時NormalMapが無い場合には　GetNormalMap()はblackMapを返すように.
　PBRにはnormalMapは必須という前提だがそれが無い場合の対応.
　whiteMapを返すと法線の向きが変わってしまうのでblackMapを返すことに.
シェーダ定数の転送は　シェーダファイル毎描画フレーム毎に１回にしてみた
　fpsに変わりはなかった


2023/12/08
Shaderプレートメニュー追加
　Shaderの設定をマテリアルごとに設定する仕様に変更.
　Shaderメニューのウインドウの見出し行のボタンで全マテリアルに対しての設定も可能.
　マテリアルごとにシェーダータイプ、メタル係数、ライトスケールx8個の設定が可能.
　プロジェクトファイル保存時に他のファイルと共に*.stfファイルとして保存、プロジェクト読み込み時に自動読込
ライトパラメータのシェーダへの転送が十分ではなかったのを修正
デフォルトのメタル係数を0.7から0.25へ変更
アプリのアイコンを変更(再起動しないと変更が反映されないこともあるようです)
README.mdのスクリーンショットを更新


2023/12/06
Lightプレートメニューの設定をシェーダーに反映.
ライトの数は８個まで.
矢印キーによるジョイント階層ウインドウの選択移動機能を復活


2023/12/05
ZPrepassレンダーを導入. カラー描画前にZバッファを構築する方法. 画面手前に遮蔽物があるほど描画が高速化.
ZPrepassレンダー時には半透明メッシュはZバッファに書き込まないように.
ZPrepassは4KTVモードでは遮蔽面積が大きいため効果があるが2KTVモードではZ書き込みコストの方が効果よりも大きい
ZPrepassは4KTVモードのときだけ有効にした.
シェーダーとパイプラインについてリファクタリングし　DispParamsプレートメニューのShaderTypeでAuto, PBR, STD, NOLIGHTを切り替え可能に.
法線マップを設定していないモデルに対してPBRを選択すると　法線が０となり黒い表示になることに注意
ShaderTypeでAUTOを選んだ場合のシェーダー設定は以下
　スキンメッシュについては　[Albedo無しまたはNormal有またはMetal有]->PBR,　[Albedoだけ有またはテクスチャ１つも無し]->NOLIGHT
　非スキンメッシュについては　[Albedo無しまたはNormal有またはMetal有]->PBR,　[Albedoだけ有またはテクスチャ１つも無し]->STD
スキンメッシュと非スキンメッシュそれぞれのShaderTypeに対して　不透明、半透明、半透明常時上書きの設定があり自動設定



2023/12/04
PBR対応開始
//############
// UnityAssetをUnityでfbxエクスポートする場合、全てのマテリアルのシェーダーをStandardにするとfbxにテクスチャ名が出力される
// それ用のEditorスクリプトをみつけてきて使っています
//############
テクスチャ無しの場合とノーマルマップまたはメタルマップがある場合にPBR、それ以外の場合にStandardで描画
プロジェクト保存時　fbxのPBR用テクスチャ(albedo, normal, metal)も保存
描画はモデルを横断してDispGroupNo順に行っている　DispGroupNo == 1以外の描画時には強制的に半透明描画
//############
//pMesh->GetNode()に対してGetMaterial(i)を呼んでマテリアル情報を取得すると不正な情報が入っていた
//マテリアル名に本来のマテリアル情報とは異なるtypo_2という名前, テクスチャにtype_2.pngが入っていた
//pMesh->GetNode()はマテリアル情報のためには使わないことに.
//############


2023/12/02
もう少し前準備として　不透明半透明のパイプライン切り替え　ボーンマトリックス更新最適化
プロジェクト保存時にfbxのテクスチャが保存されなくなっていたのを修正
Testフォルダをgit add. モデルはVRoid.


2023/12/01
描画を綺麗にする前に目立った不具合に対応
MaterialBankをモデル(fbx, mqo)ごとに持つように修正
マテリアル番号の重複によるマテリアルずれ解消
マニピュレータ不具合解消
ボーンマトリックスの転送を毎回の描画のマテリアルごとに１回に絞り少しだけ高速化


2023/11/30
MaterialBankを追加することにより大きい背景fbxも読み込めるようになった
ただし１つのfbxにつきボーン数は1000個までという制限付き
デスクリプタヒープの数を減らすことにより背景を読めるようになったのだが
マテリアルごとに全部のボーン姿勢を転送しなくてはならなくなり重くなってしまった
マニピュレータの常時上書き設定は一時的に効かなくしている
明日は背景を綺麗に表示するために修正する予定(予定)


2023/11/29
DescriptorHeapに関するリファクタリング
大きい背景読み込み時に4038個目のDescriptorHeap作成でE_OUTOFMEMORYになる症状は変わらず
背景の描画をきれいにしたかったのだが　どうするか試しながら考える


2023/11/28
プレートメニューを２段構成に.
１段目は常時固定メニュー. ２段目はカエルボタンで変化.
１段目のメニューに対するGUIは右ペインウインドウに表示.
１段目と２段目のメニューに関わる作業を行き来するに便利なようにしたつもり.
１段目のCameraAndIKは他のメニューとは独立してトグル.
１段目のCameraAndIK以外は１段目の他のメニューをオンにしたときにオフになる.
２段目のプレートをオンにすると１段目のCameraAndIK以外はオフになる.


2023/11/27
レンダリングエンジンにフォント表示を追加
ツールチップを表示
線だけで構成されたメッシュの表示にも対応
地面データとして線で出来た格子と軸を表示


2023/11/26
選択ジョイントの位置にマニピュレータを表示
マウスホバーでマニピュレータをハイライト表示
物理プレイボタンと物理ベイクボタンをプレイヤーボタンに追加
レンダリングエンジンにスプライト描画処理を追加.
ジョイント位置にスプライト表示. マークは白、セレクトツリーは赤.


2023/11/25
魔導書のSpriteクラスを拡張してインスタンシングに対応させたInstancedSpriteクラス新規
同じスプライトを違う場所違う大きさで描画可能
InstancedSpriteでfpsとアンドゥバッファ位置を表示
GUIに関しては現在のウインドウに重ねて表示できるものがみつからないため　右ペインに通常通り表示する予定に変更
なるべくクリック回数が増えないように段階を追って改善していくつもり
関節部ドラッグでとりあえずAdditiveIK出来るようにしました.　ブラシパラメータ設定などはGUIを準備してから.


2023/11/23
デバッグビルドで実行終了時に表示されるメモリリークが気になってリファクタリング
メモリリークは無くなった?


2023/11/22
スプライトGUIを魔導書のSpriteクラスで.
プロジェクトやfbxを読み込むとプレートメニューが出ます.
下の方のカエルボタンでメニュー変更. 上の方のカエルボタンでショートカットボタンを変更.
Documents/ModifyAboutGrimoireSpriteClass.docx追加
Documents/CoexistenceOfConventionalMaterialsAndPBR.docx追加
カメラ操作を有効に. CameraAndIKプレートをクリックしてボタンを出し、３つのカメラボタンドラッグでカメラ操作.
モーションのプレビューが出来るようになりました.
モーション付きモデルを読み込み後にタイムラインのプレイマークのボタンでプレビュー.


2023/11/20
Texture設定の無いメッシュ描画時には白いalbedoテクスチャを使用
マテリアルのdiffuse色のテクスチャを作成してalbedoテクスチャと乗算して描画
このようにすることで　古いマテリアル形式と将来対応するPBRとが共存出来る可能性
4KTV接続時にアプリウインドウ大と小を選べるように


2023/11/19
Texture表示が可能になった
透過テクスチャを有効に
透過テクスチャ遅延描画順機能(LaterTransparent)を有効に


2023/11/18
DirectX12による表示開始
とりあえず　白いシルエットでモデルを表示
VRoidモデルはシルエット表示できた
仕組みとしてはテクスチャに対応しているのだが　シェーダーでテクスチャを使うと何も表示されなかった
4000個くらいメッシュがあるfbxを読み込むとアウトオブメモリエラーだった
次回はテクスチャを表示したい


2023_11_14
もの凄い作り直しをしようとしていましたが　考えた結果　表示とUIの挿げ替えをすることに
MameBake3Dの表示をPBRとカスケードシャドウに対応させて　UIはimguiで表示するための作業をしていく 予定
とりあえずDX12用のファイルを足して　DX11をコメントアウト　してビルドして起動可能に
まだモデルを表示できない状態


2023_11_12
まずはAdditiveIKのレポジトリを作成
MameBake3D + HLSシェーダーの魔導書(DirectX12)の描画　+ DirectX12の魔導書のDX12文法 + bullet physicsからスタートする予定
ビルドは出来ますがまだ動きません　これからです.








